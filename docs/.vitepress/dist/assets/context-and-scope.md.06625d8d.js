import{_ as t,c as e,o as n,d as s}from"./app.d91ec24d.js";const g=JSON.parse('{"title":"System Scope and Context","description":"","frontmatter":{},"headers":[{"level":2,"title":"Business Context","slug":"business-context","link":"#business-context","children":[]},{"level":2,"title":"Technical Context","slug":"technical-context","link":"#technical-context","children":[]}],"relativePath":"context-and-scope.md"}'),o={name:"context-and-scope.md"},a=s('<h1 id="system-scope-and-context" tabindex="-1">System Scope and Context <a class="header-anchor" href="#system-scope-and-context" aria-hidden="true">#</a></h1><p><strong>Contents.</strong></p><p>System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.</p><p>If necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware).</p><p><strong>Motivation.</strong></p><p>The domain interfaces and technical interfaces to communication partners are among your system\u2019s most critical aspects. Make sure that you completely understand them.</p><p><strong>Form.</strong></p><p>Various options:</p><ul><li><p>Context diagrams</p></li><li><p>Lists of communication partners and their interfaces.</p></li></ul><h2 id="business-context" tabindex="-1">Business Context <a class="header-anchor" href="#business-context" aria-hidden="true">#</a></h2><p><strong>Contents.</strong></p><p>Specification of <strong>all</strong> communication partners (users, IT-systems, \u2026) with explanations of domain specific inputs and outputs or interfaces. Optionally you can add domain specific formats or communication protocols.</p><p><strong>Motivation.</strong></p><p>All stakeholders should understand which data are exchanged with the environment of the system.</p><p><strong>Form.</strong></p><p>All kinds of diagrams that show the system as a black box and specify the domain interfaces to communication partners.</p><p>Alternatively (or additionally) you can use a table. The title of the table is the name of your system, the three columns contain the name of the communication partner, the inputs, and the outputs.</p><p><strong>&lt;Diagram or Table&gt;</strong></p><p><strong>&lt;optionally: Explanation of external domain interfaces&gt;</strong></p><h2 id="technical-context" tabindex="-1">Technical Context <a class="header-anchor" href="#technical-context" aria-hidden="true">#</a></h2><p><strong>Contents.</strong></p><p>Technical interfaces (channels and transmission media) linking your system to its environment. In addition a mapping of domain specific input/output to the channels, i.e. an explanation with I/O uses which channel.</p><p><strong>Motivation.</strong></p><p>Many stakeholders make architectural decision based on the technical interfaces between the system and its context. Especially infrastructure or hardware designers decide these technical interfaces.</p><p><strong>Form.</strong></p><p>E.g. UML deployment diagram describing channels to neighboring systems, together with a mapping table showing the relationships between channels and input/output.</p><p><strong>&lt;Diagram or Table&gt;</strong></p><p><strong>&lt;optionally: Explanation of technical interfaces&gt;</strong></p><p><strong>&lt;Mapping Input/Output to Channels&gt;</strong></p>',29),i=[a];function r(c,p,l,h,d,m){return n(),e("div",null,i)}const f=t(o,[["render",r]]);export{g as __pageData,f as default};
