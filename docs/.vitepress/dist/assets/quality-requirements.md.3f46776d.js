import{_ as e,c as t,o as i,d as a}from"./app.d91ec24d.js";const y=JSON.parse('{"title":"Quality Requirements","description":"","frontmatter":{},"headers":[{"level":2,"title":"Quality Tree","slug":"quality-tree","link":"#quality-tree","children":[]},{"level":2,"title":"Quality Scenarios","slug":"quality-scenarios","link":"#quality-scenarios","children":[]}],"relativePath":"quality-requirements.md"}'),s={name:"quality-requirements.md"},r=a('<h1 id="quality-requirements" tabindex="-1">Quality Requirements <a class="header-anchor" href="#quality-requirements" aria-hidden="true">#</a></h1><p><strong>Content.</strong></p><p>This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals)</p><p>Here you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved.</p><p><strong>Motivation.</strong></p><p>Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable.</p><h2 id="quality-tree" tabindex="-1">Quality Tree <a class="header-anchor" href="#quality-tree" aria-hidden="true">#</a></h2><p><strong>Content.</strong></p><p>The quality tree (as defined in ATAM \u2013 Architecture Tradeoff Analysis Method) with quality/evaluation scenarios as leafs.</p><p><strong>Motivation.</strong></p><p>The tree structure with priorities provides an overview for a sometimes large number of quality requirements.</p><p><strong>Form.</strong></p><p>The quality tree is a high-level overview of the quality goals and requirements:</p><ul><li><p>tree-like refinement of the term &quot;quality&quot;. Use &quot;quality&quot; or &quot;usefulness&quot; as a root</p></li><li><p>a mind map with quality categories as main branches</p></li></ul><p>In any case the tree should include links to the scenarios of the following section.</p><h2 id="quality-scenarios" tabindex="-1">Quality Scenarios <a class="header-anchor" href="#quality-scenarios" aria-hidden="true">#</a></h2><p><strong>Contents.</strong></p><p>Concretization of (sometimes vague or implicit) quality requirements using (quality) scenarios.</p><p>These scenarios describe what should happen when a stimulus arrives at the system.</p><p>For architects, two kinds of scenarios are important:</p><ul><li><p>Usage scenarios (also called application scenarios or use case scenarios) describe the system\u2019s runtime reaction to a certain stimulus. This also includes scenarios that describe the system\u2019s efficiency or performance. Example: The system reacts to a user\u2019s request within one second.</p></li><li><p>Change scenarios describe a modification of the system or of its immediate environment. Example: Additional functionality is implemented or requirements for a quality attribute change.</p></li></ul><p><strong>Motivation.</strong></p><p>Scenarios make quality requirements concrete and allow to more easily measure or decide whether they are fulfilled.</p><p>Especially when you want to assess your architecture using methods like ATAM you need to describe your quality goals (from section 1.2) more precisely down to a level of scenarios that can be discussed and evaluated.</p><p><strong>Form.</strong></p><p>Tabular or free form text.</p>',26),o=[r];function n(l,u,c,h,p,d){return i(),t("div",null,o)}const q=e(s,[["render",n]]);export{y as __pageData,q as default};
